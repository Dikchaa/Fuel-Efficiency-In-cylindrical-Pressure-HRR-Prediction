# -*- coding: utf-8 -*-
"""Efficiency visual.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14O1CQUFOtPjTpFiY3o9P-7YHIlbnX_xi

Fuel : Butanol 10
"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing the fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [26.28,25.935]  # Example values for fuel 1 amount
fuel_amounts_2 = [2.628,2.5935]  # Example values for fuel 2 amount


# Define other parameters
calorific_value1 = 35800
calorific_value2 = 33100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers
density1 = 958
density2 = 811.6

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']

# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
          # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Diesel"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing the fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [26.955,27.12]  # Example values for fuel 1 amount
fuel_amounts_2 = [0,0]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 42500
calorific_value2 = 0
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers
density1 = 840
density2 = 0

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
          # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : CNSL"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing the fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [28.18,27.756,28.042]  # Example values for fuel 1 amount
fuel_amounts_2 = [0,0,0]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 0
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers
density1 = 958
density2 = 0

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
         # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : CNSOME"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [27.43,27.756]  # Example values for fuel 1 amount
fuel_amounts_2 = [0,0]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 38400
calorific_value2 = 0
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers
density1 = 906.4
density2 = 0

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
         # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Butanol 20"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [27.43,27.756]  # Example values for fuel 1 amount
fuel_amounts_2 = [4.8576,4.7772]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 33100
brake_powers =  [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 811.6

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
            # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Butanol 30"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [22.4,22.616]  # Example values for fuel 1 amount
fuel_amounts_2 = [6.72,6.7848]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 33100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 811.6

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
            # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Butanol 40"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [21.522]  # Example values for fuel 1 amount
fuel_amounts_2 = [8.6088]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 33100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 811.6

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
           # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Methanol 10"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [26.955,27.12]  # Example values for fuel 1 amount
fuel_amounts_2 = [2.6955,2.712]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 20000
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 776

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
           # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Methanol 20"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [25.298,25.935,25.935]  # Example values for fuel 1 amount
fuel_amounts_2 = [5.0596,5.187,5.187]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 20000
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 776

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
           # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Methanol 30"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [24.288,24.983]  # Example values for fuel 1 amount
fuel_amounts_2 = [7.28639999999999,7.49489999999999]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 20000
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 776

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
           # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Methanol 40"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [23.429,23.886]  # Example values for fuel 1 amount
fuel_amounts_2 = [9.37159999999999,9.5544]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 20000
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 776

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
         # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Coconut oil 10"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [25.298]  # Example values for fuel 1 amount
fuel_amounts_2 = [2.5298]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 37100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 915.1

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)
     # Print header for this combination of fuel amounts
    print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}:")

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)
        # Print efficiency for each brake power
        print(f"For Brake Power = {brake_power} kW, Efficiency = {efficiency:.2f}%")

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Coconut oil 20"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [23.429]  # Example values for fuel 1 amount
fuel_amounts_2 = [4.68579999999999]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 37100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 915.1

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Coconut oil 30"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [21.522]  # Example values for fuel 1 amount
fuel_amounts_2 = [6.45659999999999]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 37100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 915.1

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Coconut oil 40"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [20.11]  # Example values for fuel 1 amount
fuel_amounts_2 = [8.044]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 37100
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 915.1

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Cotton Seed Oil 10"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [25.298,24.983]  # Example values for fuel 1 amount
fuel_amounts_2 = [2.5298,2.4983]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 40400
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 909.8

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Cotton Seed Oil 30"""

import matplotlib.pyplot as plt
import numpy as np

# Define lists containing fuel amounts for fuel 1 and fuel 2
fuel_amounts_1 = [20.958,20.972]  # Example values for fuel 1 amount
fuel_amounts_2 = [2.5298,2.4983]  # Example values for fuel 2 amount

# Define other parameters
calorific_value1 = 35800
calorific_value2 = 40400
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]
density1 = 958
density2 = 909.8

# Define colors for the bars
colors = ['#99ccff', '#99ff99', '#cc99ff']


# Set width of the bars
bar_width = 0.35

# Define the index for the x-axis ticks
ind = np.arange(len(brake_powers))

# Loop through all combinations of fuel amounts for fuel 1 and fuel 2
for i, (fuel_amount_1, fuel_amount_2) in enumerate(zip(fuel_amounts_1, fuel_amounts_2)):
    # Calculate mass of fuel 1 and fuel 2
    mass_of_fuel1 = ((fuel_amount_1 * 0.000001) / 60) * density1
    mass_of_fuel2 = ((fuel_amount_2 * 0.000001) / 60) * density2

    # Calculate heat input
    heat_input = (mass_of_fuel1 * calorific_value1) + (mass_of_fuel2 * calorific_value2)

    # Empty list to store efficiencies for this fuel combination
    efficiencies = []

    # Loop through all brake powers
    for brake_power in brake_powers:
        # Calculate efficiency for fuel 1 and fuel 2
        efficiency = (brake_power / heat_input) * 100
        efficiencies.append(efficiency)

    # Plotting for this fuel combination with proper offset for each set of bars
    plt.bar(ind + i * bar_width, efficiencies, bar_width, color=colors[i], label=f'Fuel 1 = {fuel_amount_1}, Fuel 2 = {fuel_amount_2}')

    # Annotate each bar with its efficiency value
    for j, efficiency in enumerate(efficiencies):
        plt.text(ind[j] + i * bar_width, efficiency + 0.5, f'{efficiency:.2f}%', ha='center', va='bottom', rotation=45)

# Set x-axis labels
plt.xticks(ind + bar_width * (len(fuel_amounts_1) - 1) / 2, brake_powers)

plt.ylabel('Efficiency (%)')
plt.xlabel('Brake Power (kW)')
plt.title('Efficiency vs. Brake Power')
plt.legend()
plt.grid(True)

plt.show()

"""Fuel : Cotton Seed Oil 40"""









