# -*- coding: utf-8 -*-
"""BP_2.08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_QPIeMf8YUOLOxUIZc9Z105GBDDrhiD

BUTANOL 10
"""

#Butano1 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=811.6
calorific_value2=33100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DIESEL"""

#Diesel
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 42500
brake_power = 2.08
density1 = 840
density2=0
calorific_value2=0
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CNSL"""

#CNSL
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=0
calorific_value2=0
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CNSOME"""

#CNSOME
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 38400
brake_power = 2.08
density1 = 906.4
density2=0
calorific_value2=0
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Butanol 20"""

#Butano1 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=811.6
calorific_value2=33100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Butanol 30"""

#Butano1 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=811.6
calorific_value2=33100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Butanol 40"""

#Butano1 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=811.6
calorific_value2=33100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Methanol 10"""

#Methano1 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=776
calorific_value2=20000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Methanol 20"""

#Methano1 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=776
calorific_value2=20000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Methanol 30"""

#Methano1 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=776
calorific_value2=20000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0<= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""Methanol 40"""

#Methano1 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=776
calorific_value2=20000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COCO 10"""

#COCO 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=915.1
calorific_value2=37100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COCO 20"""

#COCO 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=915.1
calorific_value2=37100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COCO30"""

#COCO 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=915.1
calorific_value2=37100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COCO 40"""

#COCO 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=915.1
calorific_value2=37100
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0<= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COT 10"""

#COT 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=909.8
calorific_value2=40400
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COT 20"""

#COT 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=909.8
calorific_value2=40400
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0<= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COT 30"""

#COT 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=909.8
calorific_value2=40400
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""COT 40"""

#COT 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=909.8
calorific_value2=40400
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""OP 10"""

#OP10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=816.9
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""OP 20"""

#OP20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=816.9
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""OP 30"""

#OP30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=816.9
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""OP 40"""

#OP40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=816.9
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DMC 10"""

#DMC 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=1073
calorific_value2=35000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DMC 20"""

#DMC 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=1073
calorific_value2=35000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DMC 30"""

#DMC 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=1073
calorific_value2=35000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DMC 40"""

#DMC 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=1073
calorific_value2=35000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CM 10"""

#CM 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=894.2
calorific_value2=38200
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CM 20"""

#CM 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=894.2
calorific_value2=38200
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CM 30"""

#CM 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=894.2
calorific_value2=38200
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0<= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""CM 40"""

#CM 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=894.2
calorific_value2=38200
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DEE 10"""

#DEE 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=713
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DEE 20"""

#DEE 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=713
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DEE 30"""

#DEE 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=713
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DEE 40"""

#DEE 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=713
calorific_value2=39000
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DIESEL 10"""



#DIESEL 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=840
calorific_value2=42500
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DIESEL 20"""

#DIESEL 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=840
calorific_value2=42500
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DIESEL 30"""

#DIESEL 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power =2.08
density1 = 958
density2=840
calorific_value2=42500
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""DIESEL 40"""

#DIESEL 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=840
calorific_value2=42500
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""ETHANOL 10"""

#ETHANOL 10
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.1)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=790
calorific_value2=26700
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.1, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.1, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""ETHANOL 20"""

#ETHANOL 20
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.2)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=790
calorific_value2=26700
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.2, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.2, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""ETHANOL 30"""

#ETHANOL 30
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.3)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=790
calorific_value2=26700
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.3, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.3, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")

"""ETHANOL 40"""

#ETHANOL 40
fuel_1_range = [16.46,20.11,28.18,18.05,20.49,27.43,41.24,12.81,19.13,8.91,8.37,26.28,33.83,17.658,22.041,27.756,26.955,15.264,18.224,22.4,16.912,18.648,23.429,9.324,11.994,14.682,17.604,21.522,6.909,17.094,20.86,28.042,35.945,13.992,15.432,19.744,24.288,17.776,10.346,12.936,17.85,25.298,30.807,18.891,20.421,12.504,14.92,19.432,22.616,20.848,10.143,12.621,15.365,20.958,10.528,13.944,11.277,12.978,17.031,25.935,11.416,13.968,16.656,9.555,11.963,14.924,20.972,22.008,19.053,23.886,33.264,4.936,12.936,19.376,10.843,12.117,13.272,12.488,16.48,20.584,29.072,10.409,12.425,16.268,24.983,32.508,12.424,14.88,18.272,27.12,11.375,13.811,16.954,25.935]  # Values from 1 to 60 (inclusive)
fuel_2_range=[]
for i in fuel_1_range:
  fuel_2_range.append(i*0.4)
 # Values from 1 to 40 (inclusive)
calorific_value1 = 35800
brake_power = 2.08
density1 = 958
density2=790
calorific_value2=26700
# Assuming you have the formulas defined as functions, for example:
def predict_efficiency(fuel_amount_1, fuel_amount_2, calorific_value1,calorific_value2, brake_power, density1,density2):
    # Your formula to calculate efficiency based on the given inputs
    mass_of_fuel1 = ((fuel_amount_1  * 0.000001) / 60) * density1
    mass_of_fuel2=((fuel_amount_2  * 0.000001) / 60) * density2
    heat_input = mass_of_fuel1 * calorific_value1 + mass_of_fuel2 * calorific_value2
    efficiency = brake_power / heat_input
    return heat_input
    # Limit efficiency to a maximum value of 32
    efficiency = min(efficiency, 32)

    return efficiency

# List to store combinations that meet the efficiency criteria
efficient_combinations = []

# Loop through all combinations of fuel_1 and fuel_2
for fuel_amount_1 in fuel_1_range:
      # Use the formula-based prediction function to get efficiency
      predicted_efficiency = predict_efficiency(fuel_amount_1, fuel_amount_1*0.4, calorific_value1,calorific_value2 ,brake_power,density1,density2)
      """if 0 <= predicted_efficiency <= 24:"""
      efficient_combinations.append((fuel_amount_1, fuel_amount_1*0.4, predicted_efficiency))

# Print the combinations that meet the efficiency criteria
if efficient_combinations:
    for fuel_amount_1, fuel_amount_2, predicted_efficiency in efficient_combinations:
        eff=(brake_power/predicted_efficiency)*100
        if eff>=0 and eff<=24:
          print(f"For Fuel 1 amount = {fuel_amount_1}, Fuel 2 amount = {fuel_amount_2}, "
                f"Brake power = {brake_power}, "
                f"Heat Input = {predicted_efficiency}, ",f"Efficiency={eff}")

else:
    print("No combinations meet the efficiency criteria.")