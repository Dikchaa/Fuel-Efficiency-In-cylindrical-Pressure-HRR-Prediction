# -*- coding: utf-8 -*-
"""SFC for all fuels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jbBK9L7zArI5Q825Jc3_QT4MC-oIH9YO

Fuel:Butanol 10
"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00045515208, 0.00044917691]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diesel"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00037737,0.000433016]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:CNSL"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00039452,0.000388584,0.0004477372667]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=1, marker='s', color='purple')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=3, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:CNSOME"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004143758667,0.00041930064]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Butanol 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000453505536,0.000445999392]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Butanol 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004485525333,0.0004528778613]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Butanol 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000460082968]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Methanol 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004652433,0.0004680912]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Methanol 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004693622267,0.0004811807]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Methanol 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00048203584,0.0004958292733]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Methanol 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00049528906,0.00050495004]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Coconut oil 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004425083997]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:coconut oil 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000445549293]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='*', color='lightgreen')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Coconut oil 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels

mass_of_fuels = [0.000442108511]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='*', color='green')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Coconut oil 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004437740733]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Cotton seed oil 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000442284934,0.000436777789]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Cotton seed oil 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000429967342,0.0004302545613]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Cotton seed oil 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000434999808,0.000428125824,0.000426892032]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=9, marker='s', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='o', color='blue')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Orange peel oil 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004383679603,0.0004494060025,0.0004494060025]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=9, marker='s', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='o', color='blue')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Orange peel oil 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004378802003,0.000446421378]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Orange peel oil 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004419477645,0.000441286076]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004306087267,0.00043874554,0.000437268066,0.0004407583307]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=7, marker='o', color='blue')
    elif i==2:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='s', color='yellow')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=1, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Dimethyl carbonate 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00044916599,0.000443573165]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Dimethyl carbonate 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004419920267]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Dimethyl carbonate 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004449785667,0.0004447225867,0.00044706907,0.0004473677133]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=7, marker='o', color='blue')
    elif i==2:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='s', color='yellow')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=1, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Dimethyl carbonate 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00045648128,0.00044926784,0.00044797312]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=3, marker='o', color='blue')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=1, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Camphor oil 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000441627186]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Camphor oil 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004439170727]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Camphor oil 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000439859462]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Camphor oil 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00044097208]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diethyl ether 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004508334,0.000444914925]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diethyl ether 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00044552288,0.00043814886]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diethyl ether 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004375093333,0.0004417281733]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diethyl ether 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004322192,0.00043197056,0.00043424976,0.00043453984]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    elif i==1:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=7, marker='o', color='blue')
    elif i==2:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=5, marker='s', color='yellow')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=1, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diesel 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004393419333,0.0004338714333]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diesel 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004396842333]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diesel 30



"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.000434027]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Diesel 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.0004258122667]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
         plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=4, marker='*', color='green')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Ethanol 10"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00047]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
         plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=4, marker='*', color='green')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Ethanol 20"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00046,0.00045]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Ethanol 30"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00046,0.00047]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()

"""Fuel:Ethanol 40"""

import matplotlib.pyplot as plt

# Define lists containing the mass of fuels
mass_of_fuels = [0.00046,0.00047]  # Example values for mass of fuels in kg

# Define the brake powers
brake_powers = [5.2, 4.16, 3.12, 2.08, 1.04]  # Different brake powers in kW

# Empty list to store SFC values
sfc_values = []

# Calculate specific fuel consumption (SFC) for each combination of mass of fuel and brake power
for mass_of_fuel in mass_of_fuels:
    for brake_power in brake_powers:
        sfc = (mass_of_fuel * 3600) / brake_power
        sfc_values.append(sfc)
        print(f"For Mass of Fuel = {mass_of_fuel} kg, Brake Power = {brake_power} kW, SFC = {sfc:.2f} kg/kWh")

# Reshape sfc_values for visualization
sfc_values = [sfc_values[i:i + len(brake_powers)] for i in range(0, len(sfc_values), len(brake_powers))]

# Plotting
for i, mass_of_fuel in enumerate(mass_of_fuels):
    if i == 0:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=8, marker='o', color='lightgreen')
    else:
        plt.plot(brake_powers, sfc_values[i], label=f'Mass of Fuel = {mass_of_fuel} kg', linewidth=2, marker='*', color='red')

# Annotate each point with its value
for i, mass_of_fuel in enumerate(mass_of_fuels):
    for j, bp in enumerate(brake_powers):
        plt.annotate(f'{sfc_values[i][j]:.2f}', (bp, sfc_values[i][j]), textcoords="offset points", xytext=(0,15*i), ha='center')

plt.xlabel('Brake Power (kW)')
plt.ylabel('Specific Fuel Consumption (kg/kWh)')
plt.title('Brake Power vs. Specific Fuel Consumption')
plt.legend()
plt.grid(True)
plt.show()