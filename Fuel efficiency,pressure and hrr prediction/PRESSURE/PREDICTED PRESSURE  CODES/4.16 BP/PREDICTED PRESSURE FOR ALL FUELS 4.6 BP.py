# -*- coding: utf-8 -*-
"""Predicted pressure 4.16 bp all fuels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oKgTOFCvsXQ_Tm54_fXIv5KacvyiWpcu

FUEL: DIESEL
MODEL: RandomForestRegressor
MASS OF FUEL:0.00057
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00057]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00047362

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00047362]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00050323

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00050323]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000431298

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000431298]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000465696

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000465696]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000455112

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000455112]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006230676667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006230676667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005111149167
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005111149167]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005430690417
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005430690417]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004911417
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004911417]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005025636
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005025636]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.000465442425
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000465442425]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005849228667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005849228667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005693553667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005693553667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0008560049333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008560049333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005454852
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005454852]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0007021980333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007021980333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00057612204
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00057612204]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00055949595
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00055949595]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005820584467
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005820584467]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0007460983833
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007460983833]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005251021533
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005251021533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00063945063
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00063945063]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00053832415
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053832415]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00069044976
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00069044976]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006034378133
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006034378133]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005185638033
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005185638033]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00067475772
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00067475772]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005629208
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005629208]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00053832415
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053832415]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005849228667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005592790667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005592790667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005443940667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005443940667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0008184765333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008184765333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006714127333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006714127333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00055086408
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00055086408]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005349669
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005349669]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005565402267
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005565402267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0007133884333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007133884333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00061141626
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00061141626]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00066017952
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00066017952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005769822933
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005769822933]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00064517544
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00064517544]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005382416
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005382416]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005789487067
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005789487067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005635402067
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005635402067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0008472620533
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008472620533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00053991384
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053991384]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00053282593
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053282593]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006950260733
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006950260733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000570237768
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000570237768]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00055378149
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00055378149]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004813409953
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004813409953]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005761135427
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005761135427]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0007384780433
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007384780433]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000498988864
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000498988864]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005197389773
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005197389773]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000632919546
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000632919546]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000490729908
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000490729908]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000683397792
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000683397792]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005972745493
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005972745493]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005132674073
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005132674073]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000667866024
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000667866024]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00055717136
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00055717136]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""
1.   FUEL: DIESEL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEl:0.0005682966667,0.0005531716667,0.0008316733333,0.00052998,0.0006822383333,0.000559746


"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005682966667,0.0005531716667,0.0008316733333,0.00052998,0.0006822383333,0.000559746]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005435925,0.0004724848333,0.0005655136667,0.0007248908333,0.000489808,0.0005101763333
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005435925,0.0004724848333,0.0005655136667,0.0007248908333,0.000489808,0.0005101763333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0006212745,0.0005230225,0.000481701,0.000670824,0.0005862853333,0.0005038238333
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006212745,0.0005230225,0.000481701,0.000670824,0.0005862853333,0.0005038238333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000655578,0.00054692,0.0005230225
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000655578,0.00054692,0.0005230225]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 20
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005288446667,0.0005147696667,0.0007739373333,0.000493188,0.0006348763333,0.0005208876
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005288446667,0.0005147696667,0.0007739373333,0.000493188,0.0006348763333,0.0005208876]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 20
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005058555,0.0005262548667,0.0006745678333,0.0004747591333,0.0005781447,0.000486713
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005058555,0.0005262548667,0.0006745678333,0.0004747591333,0.0005781447,0.000486713]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DIESEL 20
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0006242544,0.0005455845333,0.0006100668,0.000508952,0.0004867135
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DIESEL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006242544,0.0005455845333,0.0006100668,0.000508952,0.0004867135]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: DI METHYL CARBONATE 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005003359,0.00048701965,0.0007322162,0.00060065165,0.00049280778,0.00049788571
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI METHYL CARBONATE 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005003359,0.00048701965,0.0007322162,0.00060065165,0.00049280778,0.00049788571]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI METHYL CARBONATE 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.000638203475,0.000546978285,0.00059060232,0.00051617336,0.00057717954
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI METHYL CARBONATE 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000638203475,0.000546978285,0.00059060232,0.00051617336,0.00057717954]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005339358533,0.0005197253533,0.0007813880267,0.00049793592,0.0006409882867,0.000525902184
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005339358533,0.0005197253533,0.0007813880267,0.00049793592,0.0006409882867,0.000525902184]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00051072537,0.0005313211213,0.0006810618967,0.0004793296387,0.000583710498,0.00049139909
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00051072537,0.0005313211213,0.0006810618967,0.0004793296387,0.000583710498,0.00049139909]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.000630264096,0.0005508368747,0.000615939912,0.00051385168,0.00049139909
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000630264096,0.0005508368747,0.000615939912,0.00051385168,0.00049139909]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005759334467,0.0005606051967,0.0008428493733,0.00053710188,0.0006914062633,0.000567267876
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005759334467,0.0005606051967,0.0008428493733,0.00053710188,0.0006914062633,0.000567267876]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000550897305,0.0004788340923,0.0005731130487,0.0007346319283,0.000496390048,0.0005170320913
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000550897305,0.0004788340923,0.0005731130487,0.0007346319283,0.000496390048,0.0005170320913]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000629623197,0.000530050885,0.000488174106,0.000679838544,0.0005941638453,0.0005105942263
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000629623197,0.000530050885,0.000488174106,0.000679838544,0.0005941638453,0.0005105942263]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: CAMPHOUR OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000664387668,0.00055426952,0.000530050885
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000664387668,0.00055426952,0.000530050885]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005169151333,0.0005031576333,0.0007564790667,0.0004820628,0.0006205549667,0.00050913756
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005169151333,0.0005031576333,0.0007564790667,0.0004820628,0.0006205549667,0.00050913756]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00049444455,0.0005143837533,0.0006593511167,0.00056510307,0.00061017264,0.0005332773867
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00049444455,0.0005143837533,0.0006593511167,0.00056510307,0.00061017264,0.0005332773867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00059630508,0.0004974712
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00059630508,0.0004974712]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005504023667,0.0005357536167,0.0008054859333,0.0005132922,0.0006607562833,0.00054212094
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005504023667,0.0005357536167,0.0008054859333,0.0005132922,0.0006607562833,0.00054212094]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000526476075,0.0005477069967,0.0007020657583,0.0004941121033,0.000601712055,0.000506553775
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000526476075,0.0005477069967,0.0007020657583,0.0004941121033,0.000601712055,0.000506553775]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: DI ETHYL ETHER 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00064970136,0.0005678246133,0.0004879596283,0.00063493542,0.0005296988,0.000506553775
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00064970136,0.0005678246133,0.0004879596283,0.00063493542,0.0005296988,0.000506553775]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: ORANGE PEEL OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0005266748067,0.0005126575567,0.0007707618533,0.00049116444,0.0006322714233,0.000518750388

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005266748067,0.0005126575567,0.0007707618533,0.00049116444,0.0006322714233,0.000518750388
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ORANGE PEEL OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000503779965,0.0005240956327,0.0006718000683,0.000575772561,0.000484716505,0.000621693072
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000503779965,0.0005240956327,0.0006718000683,0.000575772561,0.000484716505,0.000621693072]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ORANGE PEEL OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0005433459893,0.000607563684,0.00050686376,0.000484716505
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005433459893,0.000607563684,0.00050686376,0.000484716505]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005650418767,0.0005500035017,0.0008269101133,0.00052694466,0.0006783309683,0.000556540182

"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005650418767,0.0005500035017,0.0008269101133,0.00052694466,0.0006783309683,0.000556540182
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005404791975,0.0005622748157,0.0007207391858,0.000487002736,0.0005072544143,0.0006177162915
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005404791975,0.0005622748157,0.0007207391858,0.000487002736,0.0005072544143,0.0006177162915]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005200270075,0.000478942167,0.000666982008,0.0005829275173,0.0005009382968,0.000651823326
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005200270075,0.000478942167,0.000666982008,0.0005829275173,0.0005009382968,0.000651823326]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00054378764,0.0005200270075
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00054378764,0.0005200270075]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004880588133
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004880588133]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0007142493067
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0007142493067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005859130467
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005859130467]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0006225434367
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006225434367]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000533556702
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000533556702]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000576110304
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000576110304]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005035076587
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005035076587]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000563016888
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000563016888]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005399288
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005399288]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005255588
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005255588]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0007901584
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007901584]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005035248
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005035248]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006481828
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006481828]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00053180496
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053180496]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005164578
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005164578]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00053728472
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00053728472]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006887062
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006887062]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00059026212
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00059026212]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00063733824
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00063733824]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00055701952
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00055701952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00062285328
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00062285328]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005196192
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005196192]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0007118024
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0007118024]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005839058
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005839058]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0006204107
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006204107]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00053172882
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00053172882]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00057413664
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00057413664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00050178272
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00050178272]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00056108808
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00056108808]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005359460267
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005359460267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005216820267
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005216820267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0007843298133
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007843298133]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00049981056
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00049981056]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006434014933
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006434014933]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000527882112
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000527882112]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00051264816
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00051264816]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005333214507
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005333214507]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006836259733
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006836259733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000585908064
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000585908064]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00049324912
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00049324912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000632636928
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000632636928]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0005529106773
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005529106773]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000618258816
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000618258816]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00051578624
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00051578624]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00049324912
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00049324912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0005781314867,0.0005627447367,0.0008460660933,0.00053915172,0.0006940450033,0.000569432844
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005781314867,0.0005627447367,0.0008460660933,0.00053915172,0.0006940450033,0.000569432844]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000552999795,0.0004806615543,0.0005753003247,0.0007374356383,0.000498284512,0.0005190053353
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000552999795,0.0004806615543,0.0005753003247,0.0007374356383,0.000498284512,0.0005190053353]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000632026143,0.000532073815,0.000490037214,0.000682433136,0.0005964314613,0.0005125429003
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000632026143,0.000532073815,0.000490037214,0.000682433136,0.0005964314613,0.0005125429003]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000666923292,0.00055638488,0.000532073815
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000666923292,0.00055638488,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ETHANOL 20
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000524148,0.000510198,0.000767064,0.000629238,0.0005162616,0.0005215812
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000524148,0.000510198,0.000767064,0.000629238,0.0005162616,0.0005215812]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ETHANOL 20
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000668577,0.0005730102,0.0006187104,0.0005407392,0.0006046488,0.000504432
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000668577,0.0005730102,0.0006187104,0.0005407392,0.0006046488,0.000504432]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ETHANOL 30
2.   MODEL:  RandomForestRegressor
3.   MASS OF FUEL:0.0005612516667,0.0005463141667,0.0008213633333,0.00052341,0.0006737808333,0.000552807
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005612516667,0.0005463141667,0.0008213633333,0.00052341,0.0006737808333,0.000552807]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ETHANOL 30
2.   MODEL:  RandomForestRegressor
3.   MASS OF FUEL:0.00053685375,0.0005585031667,0.0007159045833,0.00061357275,0.00051653875,0.000662508
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00053685375,0.0005585031667,0.0007159045833,0.00061357275,0.00051653875,0.000662508]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: ETHANOL 30
2.   MODEL:  RandomForestRegressor
3.   MASS OF FUEL:0.0005790173333,0.000647451,0.00054014,0.00051653875
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005790173333,0.000647451,0.00054014,0.00051653875]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 14.6
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")