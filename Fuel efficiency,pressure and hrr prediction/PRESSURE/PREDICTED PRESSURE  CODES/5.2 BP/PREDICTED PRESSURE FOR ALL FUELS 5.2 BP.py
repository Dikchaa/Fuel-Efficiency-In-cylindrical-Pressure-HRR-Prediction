# -*- coding: utf-8 -*-
"""Predicted pressure for all fuels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGSVb7A2yBWiK70eQDvh4fY8sN8HWlRV

1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DIESEL
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00037

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - trail - Sheet1.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00037]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00045
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00045]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00045
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00045]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: BUTANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00045
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - Butanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00045]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.000465433
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004652433]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004680912
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004680912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00049
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00049]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00048
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00048]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ETHANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00046
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00046]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ETHANOL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00045
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00045]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ETHANOL 30
2.   MODEL:  RandomForestRegressor
3.   MASS OF FUEL:0.00046
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00046]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ETHANOL 30
2.   MODEL:  RandomForestRegressor
3.   MASS OF FUEL:0.00047
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ethanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00047]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: CAMPHOUR OIL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004439170727
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004439170727]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: CAMPHOUR OIL 20
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004439170727
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004439170727]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: CAMPHOUR OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CAMPHOUR OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI ETHYL ETHER 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI ETHYL ETHER 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI ETHYL ETHER 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI ETHYL ETHER 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI ETHYL ETHER 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00042
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00042]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ORANGE PEEL OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00043
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00043]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ORANGE PEEL OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00044
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004419477645
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004419477645]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: ORANGE PEEL OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000441286076
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - ORANGE PEEL OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000441286076]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI METHYL CARBONATE 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.000443573165
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI METHYL CARBONATE 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000443573165]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: DI METHYL CARBONATE 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00044916599
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - DI METHYL CARBONATE 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00044916599]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004143758667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004143758667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()

"""1.   FUEL: CNSOME
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00041930064
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - CNSOME.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00041930064]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

import matplotlib.pyplot as plt

# Iterate through each mass value
for i, mass_value in enumerate(mass_values):
    # Get the predicted pressures for the specific mass value
    predicted_pressures_for_mass = predicted_pressures_matrix[i]

    # Visualize predicted pressure vs. angle for the specific mass value
    plt.figure(figsize=(10, 6))
    plt.plot(angles, predicted_pressures_for_mass, label=f"Predicted Pressures (Mass: {mass_value})")

    plt.xlabel("Crank Angle")
    plt.ylabel("Predicted Pressure")
    plt.title(f"Predicted Pressure vs. Crank Angle for Mass of Fuel {mass_value}")
    plt.legend()
    plt.grid()
    plt.show()