# -*- coding: utf-8 -*-
"""1.04 BP all models p2ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18K60LzyAYhisa0B-TDQbYJuZZlNRL1oS

1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00032
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.19
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436

"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00029262604,0.0004476381
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00029262604,0.0004476381]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00032
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.19
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00029262604,0.0004476381
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00029262604,0.0004476381]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224

"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418

"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00032
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.19
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00029262604,0.0004476381
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00029262604,0.0004476381]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00032
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.19
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00029262604,0.0004476381
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00029262604,0.0004476381]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00021443824,0.0002568288,0.00031537472,0.0004680912,0.0001963325,0.00023837786]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00050178272,0.00017965934,0.0002144555,0.00028078568,0.00043120658,0.00056108808]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00018715018,0.00020913942,0.00022907472,0.00021554288,0.0002844448,0.00035527984]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00037985808,0.00032885478,0.00041227236,0.00057413664,0.00022327536,0.00033442976]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024108768,0.00028748256,0.0001649193,0.00020648138,0.00025758824,0.00036197672]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00024067344,0.00019464102,0.00022400028,0.00029395506,0.0004476381,0.00019704016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00035983648,0.00017506818,0.00021783846,0.0002651999,0.00036173508,0.00018171328]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00032605866,0.00035246646,0.00021581904,0.0002575192,0.00033539632,0.00039035216]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00030681376,0.00017857196,0.00022327536,0.000308091,0.00043664348,0.00053172882]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048400492,0.0006204107,0.00024150192,0.00026635632,0.00034078144,0.00041921088]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00020701644,0.00025341132,0.00030384504,0.00037146972,0.00029504244,0.0003600436]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031454624,0.000386624,0.0002919011,0.00032186448,0.00040438454,0.00016093224]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:
0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0005839058,0.00030477708,0.00038042766,0.00047906856,0.0004652433,0.00026345664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0007118024,0.0002211006,0.0003301838,0.0001537866,0.0001444662,0.0004535928]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 10
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 10.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002840996,0.0003470986,0.0004863868,0.000311543,0.0003536574,0.0004734418]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00014
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00014]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.41
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867

"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:
0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: DecisionTreeRegressor
3.   MASS OF FUEL:0.0002741023133,0.0003364803867,0.0005147233
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002741023133,0.0003364803867,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00014
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00014]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.41
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0002741023133,0.0003364803867,0.0005147233
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002741023133,0.0003364803867,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733

"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:
0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032

"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: GradientBoostingRegressor
3.   MASS OF FUEL:0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00014
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00014]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.41
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: RandomForestRegressor
3.   MASS OF FUEL:0.0002741023133,0.0003364803867,0.0005147233
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002741023133,0.0003364803867,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00014
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00014]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.41
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0002741023133,0.0003364803867,0.0005147233
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002741023133,0.0003364803867,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064517544,0.000246574986,0.0002953184,0.0003626382933,0.0005382416,0.0002257558333]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004085237867,0.0005769822933,0.0002065839533,0.0002465948333,0.0003228655733,0.0004958292733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003845490133,0.0002151974067,0.00024048206,0.00026340496,0.0002478451733,0.0003270730667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004162242933,0.00043678544,0.00037813854,0.00047405748,0.00066017952,0.00025673648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002265695467,0.00027721824,0.00033056608,0.0001896349,0.0002374256733,0.0002961916533]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002089457067,0.00027674192,0.00022381086,0.00025757004,0.00033800858,0.0005147233]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004488522133,0.0004137633067,0.00020130474,0.00025048478,0.0003049440333,0.00041594644]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00061141626,0.00037492338,0.00040528878,0.00024816272,0.000296112266,0.0003856604267]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00048203584,0.000352794346,0.0002053336133,0.00025673648,0.000354263,0.0005020809733]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004140014667,0.0005565402267,0.0007133884333,0.00027769456,0.00030627376,0.0003918525867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023804092,0.00029138876,0.00034938072,0.00042713996,0.00013712062,0.00033925892]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003616856533,0.0004445653333,0.0003356468267,0.00037010064,0.0004649875533,0.00018505032]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006714127333,0.00035045244,0.00043744038,0.00055086408,0.0005349669,0.00030293952]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008184765333,0.0002542358,0.0003796667333,0.0001768338,0.0001661166,0.0005215704]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: METHANOL 30
2.   MODEL: LinearRegression
3.   MASS OF FUEL:0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - methanol 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003266761333,0.0003991164667,0.0005592790667,0.0003582323333,0.0004066582,0.0005443940667]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00023
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00023]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.48
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000262643787,0.000322414218,0.000493205895
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000262643787,0.000322414218,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00023
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.48
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000262643787,0.000322414218,0.000493205895
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000262643787,0.000322414218,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00023
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.48})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375

"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000262643787,0.000322414218,0.000493205895
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000262643787,0.000322414218,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00023
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00023]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.48
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000262643787,0.000322414218,0.000493205895
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000262643787,0.000322414218,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000618204636,0.000236267208,0.00028297296,0.000347478624,0.00051574104,0.000216318375]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000391445928,0.000552862224,0.000197947953,0.000236286225,0.000309368556,0.000475101711]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values =[0.000368473392,0.000206201331,0.000230428989,0.000252393624,0.000237484296,0.00031340016]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000398824524,0.000418526136,0.000362330901,0.000454240062,0.000632581488,0.000246003912
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000217098072,0.000265629456,0.000316747152,0.000181707435,0.000227500371,0.000283809708]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000200210976,0.000265173048,0.000214454709,0.000246802626,0.000323878527,0.000493205895]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000430088472,0.000396466416,0.000192889431,0.000240013557,0.000292196205,0.000398558286]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000585856719,0.000359250147,0.000388346157,0.000237788568,0.00028373364,0.000369538344]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000461884896,0.000338046192,0.000196749882,0.000246003912,0.00033945345,0.000481092066]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00039669462,0.000533274714,0.000683566065,0.000266085864,0.000293470344,0.000375471648]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000228089898,0.000279207594,0.000334775268,0.000409283874,0.000131388453,0.000325076598]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000346565808,0.0004259808,0.00032161550,0.000354629016,0.000445549293,0.000177314508]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00064334511,0.000335802186,0.000419153697,0.000527835852,0.000512603235,0.000290275488]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00078426108,0.00024360777,0.00036379521,0.00016944147,0.00015917229,0.00049976676]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 20
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 20.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00031301982,0.00038243187,0.00053589906,0.00034325685,0.00038965833,0.00052163631]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00022
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00022]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.26
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002837078638,0.0003482718937,0.0005327610925

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002837078638,0.0003482718937,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00022
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00022]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.26})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953

"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002837078638,0.0003482718937,0.0005327610925
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002837078638,0.0003482718937,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:
0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values =
[0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00022
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00022]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.26
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values =[ 0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002837078638,0.0003482718937,0.0005327610925
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002837078638,0.0003482718937,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00022
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00022]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 4.26
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002837078638,0.0003482718937,0.0005327610925
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002837078638,0.0003482718937,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000667784754,0.0002552158787,0.00030566744,0.000375346469,0.00055710356,0.0002336671458]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004228399587,0.0005972018693,0.0002138234128,0.0002552364208,0.0003341799673,0.0005132049498]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:
0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003980250213,0.0002227387132,0.0002489094335,0.000272635636,0.0002565305773,0.0003385349067]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004308103193,0.000452092004,0.0003913899015,0.000490670193,0.000683314632,0.000265733468]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002345093747,0.000286932984,0.000342150328,0.0001962804025,0.0002457459398,0.0003065712953]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002162679307,0.000286439972,0.0002316540135,0.000266596239,0.0003498536405,0.0005327610925]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004645816413,0.0004282630907,0.0002083591965,0.0002592626855,0.0003156303908,0.000430522729]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006328425285,0.0003880620705,0.0004194915855,0.000256859252,0.0003064891267,0.0003991753827]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498928144,0.0003651575547,0.0002125292563,0.000265733468,0.000366677675,0.0005196757323]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004285095967,0.0005760434377,0.0007383881808,0.000287425996,0.000317006716,0.0004055845387]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246382747,0.000301600091,0.000361624302,0.000442108511,0.0001419258295,0.000351147797]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003743604453,0.0004601445333,0.0003474091227,0.000383070324,0.0004812824228,0.000191535162]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006949414983,0.000362733579,0.0004527698955,0.000570168378,0.0005537141025,0.000313555632]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008471589533,0.000263145155,0.0003929716483,0.000183030705,0.000171937935,0.00053984814]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COCONUT OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COCONUT OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003381240633,0.0004131029717,0.0005788782567,0.0003707861083,0.000420908995,0.0005634716317]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.00025
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00025]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.5
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342

"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:RandomForestRegressor
3.   MASS OF FUEL:0.0002833418723,0.0003478226127,0.000532073815
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002833418723,0.0003478226127,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.00025
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00025]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.5
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002833418723,0.0003478226127,0.000532073815
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002833418723,0.0003478226127,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:GradientBoostingRegressor
3.   MASS OF FUEL:0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Regressor model
model1 = GradientBoostingRegressor(n_estimators=100, random_state=42)

# Fit the model to the training data
model1.fit(X_train, y_train)

# Make predictions on the test data
predictions = model1.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model1.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model1.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.00025
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.00025]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.5
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.000429967342]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867

"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:DecisionTreeRegressor
3.   MASS OF FUEL:0.0002833418723,0.0003478226127,0.000532073815
"""

import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model3 = DecisionTreeRegressor()

# Fit the model to the training data
model3.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model3.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")
mass_values = [0.0002833418723,0.0003478226127,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65
        })

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model3.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.00042
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.00042]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 18.25})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002833418723,0.0003478226127,0.000532073815
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002833418723,0.0003478226127,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083

"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000666923292,0.0002548866427,0.00030527312,0.000374862261,0.00055638488,0.0002333657083
]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004222944827,0.0005964314613,0.0002135475743,0.0002549071583,0.0003337488653,0.0005125429003]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003975115573,0.0002224513737,0.000248588333,0.000272283928,0.0002561996453,0.0003380981867]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004302545613,0.000451508792,0.000390884997,0.000490037214,0.000682433136,0.000265390664]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002342068507,0.000286562832,0.000341708944,0.000196027195,0.0002454289203,0.0003061758093]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0002159889387,0.000286070456,0.000231355173,0.000266252322,0.000349402319,0.000532073815]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.00042996734
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004639823173,0.0004277106187,0.000208090407,0.000258928229,0.0003152232183,0.00042996734]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000632026143,0.000387561459,0.000418950429,0.000256527896,0.0003060937467,0.0003986604347]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000498284512,0.0003646864907,0.0002122550873,0.000265390664,0.00036620465,0.0005190053353]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0004279568067,0.0005753003247,0.0007374356383,0.000287055208,0.000316597768,0.0004050613227]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.000246064906,0.000301211018,0.000361157796,0.000441538178,0.000141742741,0.000350694806]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003738775093,0.0004595509333,0.0003469609547,0.000382576152,0.0004806615543,0.000191288076]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0006940450033,0.000362265642,0.000452185809,0.000569432844,0.000552999795,0.000313151136]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0008460660933,0.00026280569,0.000392464703,0.00018279459,0.00017171613,0.00053915172]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")

"""1.   FUEL: COTTON SEED OIL 30
2.   MODEL:LinearRegression
3.   MASS OF FUEL:0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt


# Load the dataset
data = pd.read_csv("Diesel - COTTON SEED OIL 30.csv")  # Replace with the actual path

# Separate features and target
X = data[["Crank_angle", "mass_of_fuel", "Volume", "cf_value", "viscosity", "load","cetane"]]
y = data["pressure"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=42)

# Create a Random Forest Regressor model
model2 = LinearRegression()

# Fit the model to the training data
model2.fit(X_train, y_train)

# Make predictions on the test data
predictions = model2.predict(X_test)

# Calculate the Mean Squared Error
mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error: {mse}")
mass_values = [0.0003376878733,0.0004125700567,0.0005781314867,0.0003703077833,0.00042036601,0.0005627447367]
angles = list(range(1, 721))

# Create a DataFrame for new data
new_data_rows = []

for mass_value in mass_values:
    for angle in angles:
        new_data_rows.append({
            "Crank_angle": angle,
            "mass_of_fuel": mass_value,
            "Volume": data.at[angle - 1, "Volume"],
            "cf_value": data.at[angle - 1, "cf_value"],
            "viscosity": data.at[angle - 1, "viscosity"],
            "cetane": data.at[angle - 1, "cetane"],
            "load": 3.65})

new_data = pd.DataFrame(new_data_rows)

# Predict pressures for the new data
predicted_pressures = model2.predict(new_data[X.columns])  # Use the same columns as in X

# Reshape the predictions to matrices where each row corresponds to a mass of fuel
num_angles = len(angles)
num_mass_values = len(mass_values)

predicted_pressures_matrix = predicted_pressures.reshape(num_mass_values, num_angles, -1)

# Display predicted pressures for all angles and both mass values
for i, mass_value in enumerate(mass_values):
    print(f"Predicted Pressures for Mass of Fuel {mass_value}")
    for j, angle in enumerate(angles):
        pressures = predicted_pressures_matrix[i, j, :]
        print(f"Angle {angle}: Pressures {pressures}")
    print("\n")
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Predict pressures for the new data
predicted_pressures = model2.predict(X)

# Compute metrics
mse = mean_squared_error(y, predicted_pressures)
rmse = np.sqrt(mse)
r2 = r2_score(y, predicted_pressures)

print(f"Root Mean Squared Error (RMSE): {rmse}")
print(mse)
print(f"R-squared (R2) Score: {r2}")